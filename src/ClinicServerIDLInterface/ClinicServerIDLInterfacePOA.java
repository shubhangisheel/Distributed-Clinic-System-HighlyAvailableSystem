package ClinicServerIDLInterface;


/**
* ClinicServerIDLInterface/ClinicServerIDLInterfacePOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from ClinicServerIDLInterface.idl
* Tuesday, July 5, 2016 8:10:22 PM ADT
*/

public abstract class ClinicServerIDLInterfacePOA extends org.omg.PortableServer.Servant
 implements ClinicServerIDLInterfaceOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("managerAuthentication", new java.lang.Integer (0));
    _methods.put ("createDRecord", new java.lang.Integer (1));
    _methods.put ("createNRecord", new java.lang.Integer (2));
    _methods.put ("editRecord", new java.lang.Integer (3));
    _methods.put ("getCount", new java.lang.Integer (4));
    _methods.put ("transferRecord", new java.lang.Integer (5));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // ClinicServerIDLInterface/ClinicServerIDLInterface/managerAuthentication
       {
         String managerID = in.read_string ();
         boolean $result = false;
         $result = this.managerAuthentication (managerID);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 1:  // ClinicServerIDLInterface/ClinicServerIDLInterface/createDRecord
       {
         String fName = in.read_string ();
         String lName = in.read_string ();
         String add = in.read_string ();
         String phn = in.read_string ();
         String spclztn = in.read_string ();
         String loc = in.read_string ();
         boolean $result = false;
         $result = this.createDRecord (fName, lName, add, phn, spclztn, loc);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 2:  // ClinicServerIDLInterface/ClinicServerIDLInterface/createNRecord
       {
         String fName = in.read_string ();
         String lName = in.read_string ();
         String desig = in.read_string ();
         String stat_Date = in.read_string ();
         String stat = in.read_string ();
         boolean $result = false;
         $result = this.createNRecord (fName, lName, desig, stat_Date, stat);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 3:  // ClinicServerIDLInterface/ClinicServerIDLInterface/editRecord
       {
         String recordID = in.read_string ();
         String fieldName = in.read_string ();
         String newValue = in.read_string ();
         boolean $result = false;
         $result = this.editRecord (recordID, fieldName, newValue);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 4:  // ClinicServerIDLInterface/ClinicServerIDLInterface/getCount
       {
         String recordType = in.read_string ();
         int $result = (int)0;
         $result = this.getCount (recordType);
         out = $rh.createReply();
         out.write_long ($result);
         break;
       }

       case 5:  // ClinicServerIDLInterface/ClinicServerIDLInterface/transferRecord
       {
         String managerID = in.read_string ();
         String recordID = in.read_string ();
         String location = in.read_string ();
         boolean $result = false;
         $result = this.transferRecord (managerID, recordID, location);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:ClinicServerIDLInterface/ClinicServerIDLInterface:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public ClinicServerIDLInterface _this() 
  {
    return ClinicServerIDLInterfaceHelper.narrow(
    super._this_object());
  }

  public ClinicServerIDLInterface _this(org.omg.CORBA.ORB orb) 
  {
    return ClinicServerIDLInterfaceHelper.narrow(
    super._this_object(orb));
  }


} // class ClinicServerIDLInterfacePOA
